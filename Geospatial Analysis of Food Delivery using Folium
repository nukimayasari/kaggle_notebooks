{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7745817,"sourceType":"datasetVersion","datasetId":4527983}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nukimayasari/geospatial-analysis-of-food-delivery-in-bengaluru?scriptVersionId=195835071\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-08T17:05:17.918658Z","iopub.execute_input":"2024-09-08T17:05:17.91948Z","iopub.status.idle":"2024-09-08T17:05:17.929837Z","shell.execute_reply.started":"2024-09-08T17:05:17.919424Z","shell.execute_reply":"2024-09-08T17:05:17.92851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Geospatial Analysis of Food Delivery in Bengaluru, India using Folium**","metadata":{}},{"cell_type":"markdown","source":"# Introduction\nWith the rise of food delivery services, it is important to understand the geospatial patterns of delivery locations. Analyzing delivery data can help businesses optimize their operations by identifying high-demand areas, underserved zones, and potential delivery bottlenecks. In this notebook, I explore a dataset of food deliveries in Bengaluru, India, to gain insights into delivery density and location patterns.\n\n# Data Overview\nThe dataset contains latitude and longitude information for various delivery points across Bengaluru. Each point corresponds to a location where a food order was delivered. This geospatial data can be analyzed and visualized using various mapping techniques to provide a clearer understanding of the delivery network.\n\n# The data columns used:\nLatitude: Geographic latitude of delivery locations.\nLongitude: Geographic longitude of delivery locations.\n\n# Objective\nThe objective of this analysis is to:\n* Visualize the distribution of delivery points across the city using a standard folium map.\n* Identify clusters of delivery points using marker clusters.\n* Highlight high-density delivery zones with a heat map.\n* Provide an interactive interface using folium layer control, allowing users to toggle between different visualizations.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport geopandas as gpd\nimport math\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\n\nprint('All set! Ready to go!')","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:17.944318Z","iopub.execute_input":"2024-09-08T17:05:17.9448Z","iopub.status.idle":"2024-09-08T17:05:17.951072Z","shell.execute_reply.started":"2024-09-08T17:05:17.944754Z","shell.execute_reply":"2024-09-08T17:05:17.949906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#We are loading our data\n\nfood_delivery = gpd.read_file(\"/kaggle/input/online-food-dataset/onlinefoods.csv\", index_col=0)\nfood_delivery.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:17.96622Z","iopub.execute_input":"2024-09-08T17:05:17.966667Z","iopub.status.idle":"2024-09-08T17:05:18.068438Z","shell.execute_reply.started":"2024-09-08T17:05:17.966624Z","shell.execute_reply":"2024-09-08T17:05:18.06732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Card\nThis section provides an overview of the key columns in the dataset, describing the attributes that are relevant to our analysis.\n\n* **Occupation**: The occupation or professional background of the customer.\n* **Monthly Income**: The customer's monthly income, which may provide insights into their spending habits or preferences.\n* **Educational Qualifications**: The highest level of education attained by the customer.\n* **Family Size**: The number of individuals in the customer's family, which might impact order size or frequency.\n* **Latitude**: The geographic latitude of the customer's location, used for mapping and spatial analysis.\n* **Longitude**: The geographic longitude of the customer's location.\n* **Pin Code**: The postal code of the customer's location, useful for clustering and regional analysis.\n* **Order Status**: The current status of the customer’s order, such as pending, confirmed, or delivered.\n* **Feedback**: Customer feedback provided after receiving the order, valuable for sentiment analysis or assessing service quality.","metadata":{}},{"cell_type":"markdown","source":"# Exploratory Data Analysis (EDA)\n\nBefore diving into visualizations, it’s essential to explore and understand the structure of our dataset. This section gives us a high-level overview of the data through summary statistics, information about missing values, and the shape of the dataset.\n\n* **Data Describe**: This function provides summary statistics for the dataset, such as the mean, standard deviation, and range of the latitude and longitude values. These statistics help us understand the central tendency and spread of our geospatial data.\n\n* **Null Data**: The .info() function gives us insights into the data types of each column and whether there are any missing values. Handling missing data is critical, as it can affect the accuracy of our analysis.\n\n* **Data Shape**: This tells us the number of rows and columns in our dataset, providing a sense of the data’s overall size.","metadata":{}},{"cell_type":"code","source":"#We are checking our data a bit\n\nprint('Data Describe: \\n', food_delivery.describe)\nprint('Null Data: \\n', food_delivery.info())\nprint('Data Shape: \\n', food_delivery.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:18.070246Z","iopub.execute_input":"2024-09-08T17:05:18.070659Z","iopub.status.idle":"2024-09-08T17:05:18.093349Z","shell.execute_reply.started":"2024-09-08T17:05:18.070616Z","shell.execute_reply":"2024-09-08T17:05:18.091983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Type Conversion\n\nIn the next step, we convert the latitude and longitude values from their original object type to float. This conversion is necessary because geospatial analysis and plotting functions, like those in folium, require numeric data types for accurate map plotting.\n\n* **Data Type Conversion**: By converting the latitude and longitude columns to float, we ensure that the data is suitable for geospatial visualization. This step avoids potential errors during the map creation process.\n\n* **Preview of Data**: After conversion, we inspect the first 20 rows of the dataset using .head(). This gives us a quick glimpse of how the data looks post-conversion:\n\n* **Data Types**: Finally, we confirm that the data types of the latitude and longitude columns are now float64, indicating that the conversion was successful.\n\nThese foundational steps ensure that our data is clean, in the correct format, and ready for visualization in the subsequent sections.","metadata":{}},{"cell_type":"code","source":"cols = food_delivery.loc[:, ['latitude', 'longitude']].copy()\ndata = cols.astype('float')\nprint('DATA HEAD: \\n', data.head(20))\nprint('DATA TYPE:\\n', 'LATITUDE:', data.latitude.dtype, 'LONGITUDE:', data.longitude.dtype)","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:18.094745Z","iopub.execute_input":"2024-09-08T17:05:18.095119Z","iopub.status.idle":"2024-09-08T17:05:18.111999Z","shell.execute_reply.started":"2024-09-08T17:05:18.095081Z","shell.execute_reply":"2024-09-08T17:05:18.110339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating a GeoDataFrame and Plotting Points\n\nTo perform geospatial analysis, we need to convert our data into a format that supports geospatial operations. In this case, we'll use GeoPandas to create a GeoDataFrame, which can handle geographical data and allow us to plot points on a map.\n\n* **GeoDataFrame Creation**: We begin by converting the latitude and longitude columns into a geometry column, which stores the points as geographical coordinates. This step is crucial for transforming a regular DataFrame into a GeoDataFrame, which is a GeoPandas object designed for spatial operations.\n* **Setting the Coordinate Reference System (CRS)**: To ensure our geographical data aligns properly with maps, we set the CRS to WGS84, also known as EPSG:4326. This is a global standard for geospatial data and is widely used in mapping and GIS applications.\n* **Plotting the GeoDataFrame**: Using the .plot() function from GeoPandas, we can visualize our geographic points on a basic map. In this case, we plot the points in red with a small size to represent the delivery locations in Bengaluru. The markers represent each latitude and longitude pair from our dataset.","metadata":{}},{"cell_type":"code","source":"# Create GeoDataFrame with geometry\ngeometry = gpd.points_from_xy(data['longitude'], data['latitude'])\ngdf = gpd.GeoDataFrame(data, geometry=geometry)\n\n# Set CRS to WGS84 (EPSG:4326)\ngdf.set_crs(epsg=4326, inplace=True)\n\n# Plot the GeoDataFrame\ngdf.plot(marker='o', color='red', markersize=5)","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:18.115112Z","iopub.execute_input":"2024-09-08T17:05:18.115701Z","iopub.status.idle":"2024-09-08T17:05:18.436852Z","shell.execute_reply.started":"2024-09-08T17:05:18.115641Z","shell.execute_reply":"2024-09-08T17:05:18.435418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating an Interactive Map with Markers\n\nIn this section, we use Folium to create an interactive map that allows us to visually explore the geographical distribution of our food delivery data in Bengaluru, India. Folium is a powerful tool for visualizing geospatial data in an interactive format, which provides a more engaging way to explore the dataset.\n\n* **Map Creation**: We begin by creating a map centered around Bengaluru, India, using its approximate latitude and longitude (12.9716, 77.5946). The zoom_start=12 parameter controls the initial zoom level, allowing us to view the city and surrounding areas in detail.\n* **Adding Markers**: We then loop through each row of our data to place markers at the corresponding latitude and longitude points on the map. These markers represent individual food delivery locations in Bengaluru. By adding markers one by one, we create an interactive experience where users can visually inspect the exact locations on the map.\n* **Displaying the Map**: Finally, the map is displayed directly within the notebook. Users can pan, zoom, and click on the markers to explore the data points interactively. This is particularly useful for identifying spatial patterns and trends in the delivery data.\n\nThis map serves as a foundational visualization, allowing us to understand the geographic spread of our data. By using Folium, we can create a dynamic and interactive interface that enhances the user experience compared to static maps.","metadata":{}},{"cell_type":"code","source":"# Create a map centered at an average location (Bengaluru, India)\nm = folium.Map(location=[12.9716, 77.5946], zoom_start=12)\n\n# Assuming 'data' is your DataFrame with 'latitude' and 'longitude'\n# Add points to the map\nfor idx, row in data.iterrows():\n    folium.Marker([row['latitude'], row['longitude']]).add_to(m)\n\n# Display the map (this will work inside a Kaggle notebook)\nm","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:18.438326Z","iopub.execute_input":"2024-09-08T17:05:18.438802Z","iopub.status.idle":"2024-09-08T17:05:18.701703Z","shell.execute_reply.started":"2024-09-08T17:05:18.438758Z","shell.execute_reply":"2024-09-08T17:05:18.700126Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating a Marker Cluster Map\n\nTo visualize the distribution of food delivery locations and manage the density of data points effectively, we created a marker cluster map. This approach helps in presenting a clearer view of delivery hotspots while avoiding clutter.\n\n* **Map Initialization**: We start by initializing a Folium map centered around Bengaluru, India, with a zoom level of 13. This zoom level provides a detailed view suitable for observing clusters of delivery points within the city.\n* **Marker Clustering**: Using the MarkerCluster feature, we add markers for each delivery location to the map. We ensure that only valid (non-NaN) latitude and longitude values are considered. By clustering nearby markers, the map aggregates dense areas into clusters, making it easier to interpret high-density regions without overwhelming the viewer with individual markers.\n* **Map Display and Interpretation**: The resulting map displays clustered markers representing food delivery locations across Bengaluru. From the map, we can observe that the highest concentration of food deliveries occurs in the city center. This indicates that the majority of orders are concentrated in the central areas of the city, likely due to higher population density and activity levels in those regions.\n\n","metadata":{}},{"cell_type":"code","source":"# Create marker cluster map\nm_1 = folium.Map(location=[12.9716, 77.5946], zoom_start=13)\n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows():\n    if not math.isnan(row['longitude']) and not math.isnan(row['latitude']):\n        mc.add_child(Marker([row['latitude'], row['longitude']]))\nm_1.add_child(mc)\n\n# Display the map\nm_1","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:05:18.703245Z","iopub.execute_input":"2024-09-08T17:05:18.703741Z","iopub.status.idle":"2024-09-08T17:05:18.972931Z","shell.execute_reply.started":"2024-09-08T17:05:18.703686Z","shell.execute_reply":"2024-09-08T17:05:18.971817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Creating a Heatmap\n\nTo further analyze the spatial distribution of food delivery locations, we created a heatmap overlay on our base map. Heatmaps are effective for visualizing the intensity of data points across a geographical area, highlighting areas with higher concentrations of occurrences.\n\n* **Base Map Initialization**: We initialize a Folium map centered on Bengaluru, India, with a zoom level of 12. This zoom level provides a broader view, suitable for observing the general distribution of data across the city.\n* **Adding the Heatmap**: We add a heatmap layer to the base map using the HeatMap function from Folium. The heatmap is generated from the latitude and longitude data, with a radius parameter set to 10 to control the spread of each data point. The heatmap visually represents the density of food delivery locations, with warmer colors (e.g., yellow) indicating higher concentrations of deliveries.\n* **Map Display and Interpretation**: The heatmap shows areas with varying densities of food deliveries. Similar to the marker cluster map, the heatmap reveals that the highest concentrations of deliveries are centered around Bengaluru's city center. The yellow regions on the map indicate hotspots where the number of delivery occurrences is significantly higher. \n\nThis visual representation helps to confirm and further analyze the density patterns observed in the marker clustering map.\n","metadata":{}},{"cell_type":"code","source":"# Create a base map\nm_2 = folium.Map(location=[12.9716, 77.5946], zoom_start=12)\n\n# Add a heatmap to the base map\nHeatMap(data=data[['latitude', 'longitude']], radius=10).add_to(m_2)\n\n# Display the map\nm_2","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:06:40.750069Z","iopub.execute_input":"2024-09-08T17:06:40.750516Z","iopub.status.idle":"2024-09-08T17:06:40.780041Z","shell.execute_reply.started":"2024-09-08T17:06:40.750472Z","shell.execute_reply":"2024-09-08T17:06:40.777976Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Combining Marker Clustering and Heatmap with LayerControl\n\nIn this section, we will combine marker clustering and heatmap visualizations into a single interactive map. This approach allows us to create a compact yet informative visualization that provides multiple perspectives on the spatial distribution of our data within one map.\n\n* **Combining Visualizations**: By integrating both marker clusters and a heatmap into the same interactive map, we offer a comprehensive view of food delivery data. The marker clusters show individual delivery locations grouped together to reduce clutter, while the heatmap highlights areas of high delivery density with color gradients.\n* **LayerControl**: The LayerControl tool from Folium allows users to toggle between the different layers—\"Marker Clusters\" and \"Heatmap\"—within the same map interface. This functionality makes the map more dynamic and user-friendly, enabling viewers to switch between different visualizations according to their needs.\n\nThis combined approach not only makes the visualization more compact but also enhances its informativeness by presenting multiple layers of data in one interactive map.","metadata":{}},{"cell_type":"code","source":"# Create a base map\nm_3 = folium.Map(location=[12.9716, 77.5946], zoom_start=12)\n\n# Create and add marker cluster layer\nmarker_cluster = MarkerCluster(name='Marker Clusters')\nfor idx, row in data.iterrows():\n    if not pd.isna(row['longitude']) and not pd.isna(row['latitude']):\n        folium.Marker([row['latitude'], row['longitude']]).add_to(marker_cluster)\nm_3.add_child(marker_cluster)\n\n# Create and add heatmap layer\nheatmap = HeatMap(data[['latitude', 'longitude']], radius=10, name='Heatmap')\nm_3.add_child(heatmap)\n\n# Add LayerControl to the map\nfolium.LayerControl().add_to(m_3)\n\n# Display the map\nm_3","metadata":{"execution":{"iopub.status.busy":"2024-09-08T17:59:37.17117Z","iopub.execute_input":"2024-09-08T17:59:37.171675Z","iopub.status.idle":"2024-09-08T17:59:37.460014Z","shell.execute_reply.started":"2024-09-08T17:59:37.171628Z","shell.execute_reply":"2024-09-08T17:59:37.458621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Conclusion\n\nIn this geospatial analysis of food delivery data in Bengaluru, India, Folium played a pivotal role in enhancing our visualization and understanding of spatial patterns. By utilizing Folium's interactive mapping capabilities, we were able to create dynamic and informative maps that revealed key insights into delivery distributions.\n\n# Key Takeaways:\n\n* **Interactive Visualization**: Folium’s interactive maps allowed for a detailed exploration of food delivery data, helping to uncover delivery hotspots and spatial trends within Bengaluru. Features like marker clustering and heatmaps enabled us to present complex data in a user-friendly manner.\n* **Folium’s Capabilities**: Folium proved to be a powerful tool for geospatial analysis, offering valuable functionalities such as layer controls and interactive features. This made it possible to effectively visualize and analyze geographical data without needing specialized shapefiles.\n* **Handling Data Limitations**: Even in the absence of specific geographic files, Folium provided an effective solution for visualizing and interpreting spatial data. This flexibility highlights Folium's value in overcoming common challenges in geospatial data analysis.\n\nOverall, the integration of Folium into our geospatial analysis significantly enhanced the clarity and communication of food delivery patterns in Bengaluru, demonstrating the tool's effectiveness for geospatial data visualization.","metadata":{}}]}