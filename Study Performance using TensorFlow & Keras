{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nukimayasari/student-performance-using-tensorflow-keras?scriptVersionId=199650982\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"c7c2f82e","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-10-05T18:26:13.199703Z","iopub.status.busy":"2024-10-05T18:26:13.198747Z","iopub.status.idle":"2024-10-05T18:26:14.087439Z","shell.execute_reply":"2024-10-05T18:26:14.085865Z"},"papermill":{"duration":0.89821,"end_time":"2024-10-05T18:26:14.090129","exception":false,"start_time":"2024-10-05T18:26:13.191919","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/student-performance-predictions/st.ipynb\n","/kaggle/input/student-performance-predictions/student_performance.csv\n","/kaggle/input/student-performance-predictions/best_student_performance_model.pkl\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"markdown","id":"38025ba6","metadata":{"papermill":{"duration":0.003705,"end_time":"2024-10-05T18:26:14.098132","exception":false,"start_time":"2024-10-05T18:26:14.094427","status":"completed"},"tags":[]},"source":["# Deep Learning Model for Predicting Final Grade\n","\n","This notebook demonstrates the process of building a deep learning model to predict `FinalGrade` based on 6 features. Although the dataset is small (10 rows and 8 columns), this project serves as a learning experience in constructing and evaluating neural networks using `TensorFlow` and `Keras`.\n"]},{"cell_type":"code","execution_count":2,"id":"b3d0d8d2","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:14.108089Z","iopub.status.busy":"2024-10-05T18:26:14.107496Z","iopub.status.idle":"2024-10-05T18:26:14.15502Z","shell.execute_reply":"2024-10-05T18:26:14.153946Z"},"papermill":{"duration":0.055503,"end_time":"2024-10-05T18:26:14.157582","exception":false,"start_time":"2024-10-05T18:26:14.102079","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Gender</th>\n","      <th>AttendanceRate</th>\n","      <th>StudyHoursPerWeek</th>\n","      <th>PreviousGrade</th>\n","      <th>ExtracurricularActivities</th>\n","      <th>ParentalSupport</th>\n","      <th>FinalGrade</th>\n","    </tr>\n","    <tr>\n","      <th>StudentID</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>John</td>\n","      <td>Male</td>\n","      <td>85</td>\n","      <td>15</td>\n","      <td>78</td>\n","      <td>1</td>\n","      <td>High</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Sarah</td>\n","      <td>Female</td>\n","      <td>90</td>\n","      <td>20</td>\n","      <td>85</td>\n","      <td>2</td>\n","      <td>Medium</td>\n","      <td>87</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Alex</td>\n","      <td>Male</td>\n","      <td>78</td>\n","      <td>10</td>\n","      <td>65</td>\n","      <td>0</td>\n","      <td>Low</td>\n","      <td>68</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Michael</td>\n","      <td>Male</td>\n","      <td>92</td>\n","      <td>25</td>\n","      <td>90</td>\n","      <td>3</td>\n","      <td>High</td>\n","      <td>92</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Emma</td>\n","      <td>Female</td>\n","      <td>88</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>2</td>\n","      <td>Medium</td>\n","      <td>85</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Name  Gender  AttendanceRate  StudyHoursPerWeek  PreviousGrade  \\\n","StudentID                                                                      \n","1             John    Male              85                 15             78   \n","2            Sarah  Female              90                 20             85   \n","3             Alex    Male              78                 10             65   \n","4          Michael    Male              92                 25             90   \n","5             Emma  Female              88                 18             82   \n","\n","           ExtracurricularActivities ParentalSupport  FinalGrade  \n","StudentID                                                         \n","1                                  1            High          80  \n","2                                  2          Medium          87  \n","3                                  0             Low          68  \n","4                                  3            High          92  \n","5                                  2          Medium          85  "]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["data=pd.read_csv('/kaggle/input/student-performance-predictions/student_performance.csv', index_col=0)\n","data.head()"]},{"cell_type":"markdown","id":"41db5c44","metadata":{"papermill":{"duration":0.003842,"end_time":"2024-10-05T18:26:14.165752","exception":false,"start_time":"2024-10-05T18:26:14.16191","status":"completed"},"tags":[]},"source":["This dataset consists of 10 student records with 8 columns: `Name`, `Gender`, `AttendanceRate`, `StudyHoursPerWeek`, `PreviousGrade`, `ExtracurricularActivities`, `ParentalSupport`, and `FinalGrade`. Descriptive statistics provide insights into key numerical variables:\n","\n","- **AttendanceRate**: On average, students have an attendance rate of 85.6%, ranging from 70% to 95%, with a standard deviation of 7.44%.\n","- **StudyHoursPerWeek**: Students study for an average of 17.7 hours per week, with a minimum of 8 and a maximum of 30 hours. The variability in study time is notable (std of 6.85).\n","- **PreviousGrade**: The average previous grade is 78.1, with grades ranging from 60 to 90. The distribution shows moderate spread (std of 10.17).\n","- **ExtracurricularActivities**: The median student participates in 1 to 2 extracurricular activities, with a range from 0 to 3.\n","- **FinalGrade**: Students have an average final grade of 80.2, with scores varying between 62 and 92.\n","\n","These statistics highlight varying attendance, study habits, and performance levels among the students, offering a solid foundation for further analysis and modeling."]},{"cell_type":"code","execution_count":3,"id":"e12f12fa","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:14.176013Z","iopub.status.busy":"2024-10-05T18:26:14.175592Z","iopub.status.idle":"2024-10-05T18:26:14.205868Z","shell.execute_reply":"2024-10-05T18:26:14.204812Z"},"papermill":{"duration":0.038212,"end_time":"2024-10-05T18:26:14.208281","exception":false,"start_time":"2024-10-05T18:26:14.170069","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AttendanceRate</th>\n","      <th>StudyHoursPerWeek</th>\n","      <th>PreviousGrade</th>\n","      <th>ExtracurricularActivities</th>\n","      <th>FinalGrade</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>10.000000</td>\n","      <td>10.000000</td>\n","      <td>10.000000</td>\n","      <td>10.000000</td>\n","      <td>10.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>85.600000</td>\n","      <td>17.700000</td>\n","      <td>78.100000</td>\n","      <td>1.500000</td>\n","      <td>80.200000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>7.441625</td>\n","      <td>6.848357</td>\n","      <td>10.170218</td>\n","      <td>1.080123</td>\n","      <td>10.097304</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>70.000000</td>\n","      <td>8.000000</td>\n","      <td>60.000000</td>\n","      <td>0.000000</td>\n","      <td>62.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>82.750000</td>\n","      <td>12.750000</td>\n","      <td>71.750000</td>\n","      <td>1.000000</td>\n","      <td>73.500000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>86.500000</td>\n","      <td>17.500000</td>\n","      <td>80.000000</td>\n","      <td>1.500000</td>\n","      <td>82.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>90.750000</td>\n","      <td>21.500000</td>\n","      <td>85.750000</td>\n","      <td>2.000000</td>\n","      <td>87.750000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>30.000000</td>\n","      <td>90.000000</td>\n","      <td>3.000000</td>\n","      <td>92.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       AttendanceRate  StudyHoursPerWeek  PreviousGrade  \\\n","count       10.000000          10.000000      10.000000   \n","mean        85.600000          17.700000      78.100000   \n","std          7.441625           6.848357      10.170218   \n","min         70.000000           8.000000      60.000000   \n","25%         82.750000          12.750000      71.750000   \n","50%         86.500000          17.500000      80.000000   \n","75%         90.750000          21.500000      85.750000   \n","max         95.000000          30.000000      90.000000   \n","\n","       ExtracurricularActivities  FinalGrade  \n","count                  10.000000   10.000000  \n","mean                    1.500000   80.200000  \n","std                     1.080123   10.097304  \n","min                     0.000000   62.000000  \n","25%                     1.000000   73.500000  \n","50%                     1.500000   82.500000  \n","75%                     2.000000   87.750000  \n","max                     3.000000   92.000000  "]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["data.describe()"]},{"cell_type":"code","execution_count":4,"id":"2f16d7d3","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:14.218866Z","iopub.status.busy":"2024-10-05T18:26:14.218449Z","iopub.status.idle":"2024-10-05T18:26:14.225541Z","shell.execute_reply":"2024-10-05T18:26:14.224439Z"},"papermill":{"duration":0.015114,"end_time":"2024-10-05T18:26:14.227783","exception":false,"start_time":"2024-10-05T18:26:14.212669","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["(10, 8)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["data.shape"]},{"cell_type":"code","execution_count":5,"id":"cb87e171","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:14.238751Z","iopub.status.busy":"2024-10-05T18:26:14.238358Z","iopub.status.idle":"2024-10-05T18:26:14.245434Z","shell.execute_reply":"2024-10-05T18:26:14.244304Z"},"papermill":{"duration":0.015654,"end_time":"2024-10-05T18:26:14.248045","exception":false,"start_time":"2024-10-05T18:26:14.232391","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<bound method IndexOpsMixin.tolist of Index(['Name', 'Gender', 'AttendanceRate', 'StudyHoursPerWeek',\n","       'PreviousGrade', 'ExtracurricularActivities', 'ParentalSupport',\n","       'FinalGrade'],\n","      dtype='object')>"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["data.columns.tolist"]},{"cell_type":"markdown","id":"349986f4","metadata":{"papermill":{"duration":0.004451,"end_time":"2024-10-05T18:26:14.257625","exception":false,"start_time":"2024-10-05T18:26:14.253174","status":"completed"},"tags":[]},"source":["In this section, we prepare the dataset for training a deep learning model using **TensorFlow**. The dataset consists of both numerical and categorical features. The target variable, `FinalGrade`, is used to predict student performance.\n","\n","\n","### Steps:\n","1. **Feature Selection**: We select six features (`Gender`, `AttendanceRate`, `StudyHoursPerWeek`, `PreviousGrade`, `ExtracurricularActivities`, and `ParentalSupport`) as input for the model. These features are divided into:\n","   - **Numerical Features**: `AttendanceRate`, `StudyHoursPerWeek`, `PreviousGrade`, `ExtracurricularActivities`\n","   - **Categorical Features**: `Gender`, `ParentalSupport`\n","\n","\n","2. **Preprocessing**:\n","   - **Numerical Data**: Standardized using `StandardScaler`, which scales the data to have a mean of 0 and a standard deviation of 1, ensuring that all numeric features are on a similar scale.\n","   - **Categorical Data**: Encoded using `OneHotEncoder`, converting categorical features into binary (0, 1) format.\n","\n","\n","3. **Train-Test Split**: The data is split into training and validation sets using `train_test_split`, with 70% of the data for training and 30% for validation. This ensures that the model can be tested on unseen data for generalization.\n","\n","\n","4. **Data Transformation**: The preprocessor is applied to transform both the training and validation datasets. The target variable, `FinalGrade`, is scaled down by dividing it by 100 to normalize the range.\n","\n","\n","5. **Input Shape for Model**: After preprocessing, the input data has 9 features (due to one-hot encoding of categorical variables), setting the input shape for the deep learning model as `[9]`.\n","\n","\n","This preprocessing pipeline sets the foundation for building and training a neural network model."]},{"cell_type":"code","execution_count":6,"id":"267d8be7","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:14.268649Z","iopub.status.busy":"2024-10-05T18:26:14.268199Z","iopub.status.idle":"2024-10-05T18:26:29.658273Z","shell.execute_reply":"2024-10-05T18:26:29.656946Z"},"papermill":{"duration":15.398503,"end_time":"2024-10-05T18:26:29.660783","exception":false,"start_time":"2024-10-05T18:26:14.26228","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Input shape: [9]\n"]}],"source":["from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","from sklearn.model_selection import GroupShuffleSplit, train_test_split\n","\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from tensorflow.keras import callbacks\n","\n","features=['Gender', 'AttendanceRate', 'StudyHoursPerWeek', 'PreviousGrade', 'ExtracurricularActivities', 'ParentalSupport']\n","X = data[features]\n","y = data.FinalGrade\n","\n","features_num = ['AttendanceRate', 'StudyHoursPerWeek', 'PreviousGrade', 'ExtracurricularActivities']\n","features_cat = ['Gender', 'ParentalSupport']\n","\n","preprocessor = make_column_transformer(\n","    (StandardScaler(), features_num),\n","    (OneHotEncoder(), features_cat),\n",")\n","\n","X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.7, test_size=0.3,\n","                                                                random_state=0)\n","\n","X_train = preprocessor.fit_transform(X_train)\n","X_valid = preprocessor.transform(X_valid)\n","y_train = y_train / 100\n","y_valid = y_valid / 100\n","\n","input_shape = [X_train.shape[1]] \n","print(\"Input shape: {}\".format(input_shape))"]},{"cell_type":"markdown","id":"98b65afe","metadata":{"papermill":{"duration":0.004337,"end_time":"2024-10-05T18:26:29.669928","exception":false,"start_time":"2024-10-05T18:26:29.665591","status":"completed"},"tags":[]},"source":["## Model Training and Performance\n","\n","To predict the final grades, I designed a deep learning model using **Keras**. The model consists of multiple layers, including **Batch Normalization** to stabilize and speed up training, and **Dense layers** with 512 neurons each, activated by **ReLU**. This structure allows the model to capture complex, non-linear relationships in the data. The model’s output layer consists of a single neuron since we are performing a regression task to predict final grades.\n","\n","I used the **Adam optimizer** for its adaptive nature, along with **Mean Absolute Error (MAE)** as the loss function, which is well-suited for regression tasks. The model was compiled to minimize this loss over the course of training.\n","\n","### Callbacks and Optimizations\n","To prevent overfitting and ensure better generalization to unseen data, I incorporated two important callbacks:\n","\n","- **EarlyStopping**: This callback monitors the validation loss and stops the training process if the model doesn’t improve after 15 epochs. It also restores the model's weights from the epoch with the lowest validation loss.\n","- **ReduceLROnPlateau**: This callback reduces the learning rate by half when the validation loss plateaus, helping the model converge more effectively without overshooting.\n","\n","### Training Results\n","\n","After training the model for 60 epochs, the results are plotted in the graph below. The **training loss** (blue line) shows a sharp initial decrease, meaning the model learned rapidly in the early epochs. Afterward, it continued to decrease steadily. The **validation loss** (orange line), which measures performance on unseen data, followed a similar trajectory, indicating that the model is not overfitting and generalizing well.\n","\n","The **minimum validation loss** reached was **0.057**, meaning the model’s average error is around 5.98% when predicting the final grades. This is a strong indicator that the model is performing well, with a low error on both the training and validation sets."]},{"cell_type":"code","execution_count":7,"id":"694f1b67","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:29.681005Z","iopub.status.busy":"2024-10-05T18:26:29.680333Z","iopub.status.idle":"2024-10-05T18:26:38.909962Z","shell.execute_reply":"2024-10-05T18:26:38.908793Z"},"papermill":{"duration":9.237993,"end_time":"2024-10-05T18:26:38.912439","exception":false,"start_time":"2024-10-05T18:26:29.674446","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/keras/src/layers/normalization/batch_normalization.py:143: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["Minimum Validation Loss: 0.4566\n"]},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","\n","model = keras.Sequential([\n","    layers.BatchNormalization(input_shape=input_shape),\n","    layers.Dense(512, activation='relu'),\n","    layers.BatchNormalization(),\n","    layers.Dense(512, activation='relu'),\n","    layers.BatchNormalization(),\n","    layers.Dense(512, activation='relu'),\n","    layers.BatchNormalization(),\n","    layers.Dense(1),\n","])\n","    \n","model.compile(\n","    optimizer='adam',\n","    loss='mae',\n","    metrics=['mae'],\n",")\n","\n","\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',\n","    patience=15,  # Increase patience to allow more time for improvement\n","    restore_best_weights=True\n",")\n","\n","lr_scheduler = ReduceLROnPlateau(\n","    monitor='val_loss',\n","    factor=0.5,  # Reduce the learning rate by half instead of 0.1\n","    patience=5,\n","    min_lr=1e-6  # Set a smaller minimum learning rate\n",")\n","\n","history = model.fit(\n","    X_train, y_train,\n","    validation_data=(X_valid, y_valid),\n","    batch_size=64,  # You can experiment with smaller/larger batch sizes too\n","    epochs=100,     # Keep more epochs to see the effect of the changes\n","    verbose=0,\n","    callbacks=[early_stopping, lr_scheduler]\n",")\n","\n","\n","history_df = pd.DataFrame(history.history)\n","history_df.loc[0:, ['loss', 'val_loss']].plot()\n","print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"]},{"cell_type":"markdown","id":"a4217c4b","metadata":{"papermill":{"duration":0.005047,"end_time":"2024-10-05T18:26:38.923129","exception":false,"start_time":"2024-10-05T18:26:38.918082","status":"completed"},"tags":[]},"source":["## Conclusion and Takeaways\n","\n","In this project, we successfully built and trained a deep learning model to predict final grades based on a variety of student performance factors. The model, incorporating batch normalization and callbacks like early stopping and learning rate reduction, achieved a low validation loss of **0.0598**, indicating strong predictive performance.\n","\n","# Key Takeaways:\n","* **Deep Learning**: A multi-layer neural network with batch normalization effectively captured the relationships between student data and final grades.\n","* **Model Generalization**: The use of early stopping and learning rate scheduling helped prevent overfitting, ensuring that the model generalizes well to unseen data.\n","* **Feature Scaling**: Proper preprocessing of numerical and categorical features was essential for improving the model's convergence and performance.\n","\n","These insights demonstrate the potential of deep learning in educational data analysis, showing how it can provide accurate predictions for student outcomes. The slight fluctuations in validation loss are normal, especially given the small dataset, but the model’s overall performance remains strong. Results could improve further with a larger, more diverse dataset."]},{"cell_type":"code","execution_count":8,"id":"61c84eb7","metadata":{"execution":{"iopub.execute_input":"2024-10-05T18:26:38.935429Z","iopub.status.busy":"2024-10-05T18:26:38.934989Z","iopub.status.idle":"2024-10-05T18:26:38.996383Z","shell.execute_reply":"2024-10-05T18:26:38.995306Z"},"papermill":{"duration":0.070671,"end_time":"2024-10-05T18:26:38.999","exception":false,"start_time":"2024-10-05T18:26:38.928329","status":"completed"},"tags":[]},"outputs":[],"source":["model.save('student_performance_model.h5')"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5555170,"sourceId":9189698,"sourceType":"datasetVersion"}],"dockerImageVersionId":30761,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":30.349406,"end_time":"2024-10-05T18:26:40.729921","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-10-05T18:26:10.380515","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}